1A                Implementation of lexical analyzer using C programming
STEP 1: Start 
STEP 2: Declare all variables and file pointers 
STEP 3: Display the input program. 
STEP 4: Separate the keyword in the program and display it. 
STEP 5: Display the reader files of the input program. 
STEP 6: Separate the operators of the input program and display it. 
STEP 7: Print the punctuation marks. 
STEP 8: Print the constant that are present in the input program 
STEP 9: Print the identifiers of the input program. 
PROGRAM: 
#include<string.h> 
#include<ctype.h> 
#include<stdio.h> 
void keyword(char str[10]) 
{ 
char keywords[10][10]={"int","float","char","while","do","for","if"}; 
if(!strcmp(*keywords,str)) 
{ 
printf("\n%s is a keyword",str); 
} 
else 
printf("\n%s is an identifier",str); 
} 
void main() 
{ 
FILE *f1,*f2,*f3,*f4; 
char c,str[10],st1[10]; 
int num[100],tokenvalue=0,i=0,j=0,k=0; 
printf("\nEnter the c program\n"); 
f1=fopen("input","w"); 
while((c=getchar())!=EOF) 
putc(c,f1); 
fclose(f1);
 f1=fopen("input.txt","r");  
 f2=fopen("identifier.txt ","w");  
 f3=fopen("specialchar.txt ","w");  
 f4=fopen("operators.txt ","w");  
 while((c=getc(f1))!=EOF)  
 {  
 if(isdigit(c)) {  
 tokenvalue=c-'0';  
 c=getc(f1);  
 while(isdigit(c))  
 {  
 tokenvalue*=10+c-'0';  
 c=getc(f1);  
 }  
 num[i++]=tokenvalue;  
 ungetc(c,f1);  
 }  
 else if(isalpha(c))  
 {  
 putc(c,f2);  
 c=getc(f1);  
 while(isdigit(c)||isalpha(c)||c=='_'||c=='$')  
 {  
 putc(c,f2);  
 c=getc(f1);  
 }  
 putc(' ',f2);  
 ungetc(c,f1);  
 }  
 else if(c=='+' || c=='-' ||c=='*' ||c=='<'||c=='>'||c=='/'||c=='&'||c=='%' ||c=='^' ||c== '=')   putc(c,f4);  
 else  
 putc(c,f3);  
 }  
 fclose(f4);  
 fclose(f2);  
 fclose(f3);  
 fclose(f1);  
 printf("\nThe constants are ");  
 for(j=0;j<i;j++)  
 printf("%d",num[j]);  
 printf("\n");  
 f2=fopen("identifier.txt ","r");  
 k=0;  
 printf("The keywords and identifiers are:"); 
 while((c=getc(f2))!=EOF)  
 {  
 if(c!=' ')  
 str[k++]=c;  
 else  
 {  
 str[k]='\0';  
 keyword(str);  
 k=0;  
 }  
 }  
 fclose(f2);  
 f3=fopen("specialchar.txt ","r");  
 printf("\nSpecial characters are ");  
 while((c=getc(f3))!=EOF)  
 printf("%c ",c);  
 fclose(f3);  
 f4=fopen("operators.txt ","r");  
 printf("Operators are ");  
 while((c=getc(f4))!=EOF)  
 printf("%c ",c);  
 printf("\n");  
 fclose(f4);  
}  OUTPUT: 
Enter the c program 
a+b+c+d+,.;'
The constants are
The keywords and identifiers are:
a is an identifier
b is an identifier
c is an identifier
d is an identifier
Special characters are , . ; '
Operators are + + + +
IDENTIFI.TXT : a b c d
OPERATOR.TXT : + + + +
SPECIA;C.TXT : , . ; '
INPUTOP.TXT : a+b+c+d+,.;'













1B                                Implementation of Lexical analyzer using LEX
Step 1: Start. 
Step 2: Declare all variables or header files in definition part. 
Step 3: Define action and pattern in transition rule. 
Step 4: Call yylex() function in main function. 
Step 5: Open the text file or c.file. 
Step 6: Print the number of lines, words, characters in text file. 
Step 7: Print the keywords, Special characters in c file. 
Step 8: Stop the program 
Program for count the word, character, space and line from the file using LEX: 
%{  
int c=0,w=0,l=0,s=0;  
%}  
%%  
[\n] l++;s++;  
[\t ''] s++;  
[^ '' \t \n]+ w++;c+=yyleng;  
%%  
int main(int argc,char *argv[])  
{  
 if(argc==2)  
 {  
 yyin=fopen(argv[1],"r");  
 yylex();  
 printf("\nNumber of spaces = %d",s);  
 printf("\nNumber of characters = %d",c);  
 printf("\nNumber of lines = %d",l);  
 printf("\nNumber of words = %d\n",w);  
 }  
 else  
 printf("ERROR");  
} 
abc.txt 
hai  
hello  
how are you?
Output : 
lex Programlex.l
cc lex.yy.c -ll
./a.out a.txt
Number of spaces = 3
Number of characters = 10
Number of lines = 3
Number of words =2

Program for Lexical Analyzer using LEX tool : 
%{  
#include<stdio.h>  
%}  
letter [a-zA-Z]  
digit[0-9]  
operators [+*/=%&|<>-]  
specialcharacters [();{}"]  
%%  
(#include<stdio.h>|void|main|int|float|char|printf|while|do|for|if|else|double|break|continue|sca nf|switch|case)+ {printf(" Keyword ");}  
{letter}({letter}|{digit})* {printf(" Variable ");}  
{digit}+ {printf(" Number ");}  
{operators}+ {printf(" Operator ");}  
{specialcharacters}+ {printf(" Specialcharacter ");}  
%%  
int main(int argc,char *argv[])  
{  
 yyin = fopen(argv[1],"r");  
 yylex();  
} 
abc.c: 
#include<stdio.h>  
void main()  
{  
a=b+3;  
printf("Hello world");  
}
Output : 
lex Programlex1.l
cc lex.yy.c -ll 
./a.out aa.c
Keyword
Keyword	Keyword	Specialcharacter
Specialcharacter
Variable Operator Variable Operator Number Specialcharacter
Keyword Specialcharacter Variable Variable Specialcharacter
Specialcharacter  











3        Implementation of Parser using LEX and YACC tool


Step 1: Start. 
Step 2: Declare all variables or header files. 
Step 3: Define action and pattern. 
Step 4: Call the yylex() function in the main function. 
 Step 5: Stop. 
Program : 
lexx1.l : 
%{ 
#include "y.tab.h" 
extern int yylval; 
%} 
%% 
[0-9]+ {yylval=atoi(yytext); 
printf("Scanned the number %d\n",yylval); 
return NUMBER;} 
[a-zA-Z]+ {printf("Scanned a name\n"); 
return NAME;} 
[\t] {printf("Skipped whitespace\n");} 
\n {return 0;} 
{printf("Found other data \"%s\"\n",yytext); 
return yytext[0]; 
} 
%% 
yacc1.y : 
%{ 
#include<stdio.h> 
%} 
%token NAME NUMBER 
%% 
stmt:S {printf("SUCCESS\n");}
S : '('L')'{} 
|NAME{} 
|NUMBER{}; 
L : L','S{} 
|S{} 
%% 
int main(void) 
{ 
return yyparse(); 
} 
int yyerror(char *msg) 
{ 
return fprintf(stderr,"YACC:%s\n",msg); 
} 
Output: 
lex exp3.l
yacc -d e3.y
cc lex.yy.c y.tab.c -ll
./a.out
(id)
(Scanned a name
SUCCESS














4        Implementation of Symbol table


Step 1 : Start the program. 
Step 2 : Read the input file “input.txt” in read mode. 
Step 3 : Scan the entire input till eof. 
1.If the string found was either int, float, double… copy into the datatype in  
symbol table. 
2.Update the corresponding variable and value if any in symbol table. 
3.If no value is in initializer the update the table as “garbage”. 
Step 4 : Close the file. 
Step 5 : Stop the program. 
Program: 
#include<stdio.h>  
#include<ctype.h>  
#include<string.h>  
struct symtab  
{  
 int lineno;  
 char var[25],dt[25],val[10];  
}sa[20];  
void main()  
{  
  
 int i=0,j,k,max,f=0,xx,h,m,n,l,r,ty=1,m1,line=0;  
 char s[25],typ[25],temp[25],gar[]="garbage",t[25],got[10],e[10];  
 float m2;  
 FILE *fn,*ft,*fp  
fn=fopen("input.txt","r");  
printf("\n\nSYMBOL TABLE MANAGEMENT\n\n");  
printf("Variable\tDatatype\tLine.no.\t\tValue\n");  
while(!(feof(fn)))  
{  
 fscanf(fn,"%s",s);  
 if((strcmp(s,"int")==0)||(strcmp(s,"float")==0))  
 {  
 strcpy(typ,s); line++;  
 while(s,";"!=0) 
 {  
 i++;  
 max=i; sa[i].lineno=line;  
 fscanf(fn,"%s",s);  
strcpy(sa[i].var,s);  
strcpy(sa[i].dt,typ);  
fscanf(fn,"%s",s);  
if(strcmp(s,"=")==0)  
{  
fscanf(fn,"%s",s);  
strcpy(sa[i].val,s);  
fscanf(fn,"%s",s);  
}  
else  
strcpy(sa[i].val,gar);  
if(strcmp(s,",")==0)  
continue;  
else break;  
}  
 }  
 else if(strcmp(s,"char")==0)  
 {  
 strcpy(typ,s); line++;  
 while(strcmp(s,";")!=0)  
 {  
 i++;  
 max=i; sa[i].lineno=line;  
fscanf(fn,"%s",s);  
strcpy(sa[i].var,s);  
strcpy(sa[i].dt,typ);  
fscanf(fn,"%s",s);  
if(strcmp(s,"=")==0)  
{  
fscanf(fn,"%s",s);  
fscanf(fn,"%s",s);  
strcpy(sa[i].val,s);  
fscanf(fn,"%s",s);  
fscanf(fn,"%s",s);  
}  
 }//while  
fscanf(fn,"%s",s);  
if(strcmp(s,",")==0)  
continue;  
}//else if  
 }//while  
for(i=1;i<=max;i++)  
printf("\n%s\t\t%s\t\t%d\t\t%s\n",sa[i].var,sa[i].dt,sa[i].lineno,sa[i].val); 
fclose(fn);  
}  
Input File: 
int a , b = 5 ;  
float c ;  
char d = " a " ;  
Output : 
cc sym.c
./a.out
SYMBOL	TABLE	MANAGEMENT
Variable	Datatype	Line.no.	Value
a		int		1		garbage
b		int		1		5
c		float		2		garbage
d		char		3		a







  



6        Implementation of Shift Reduce Parser


STEP 1: Start with the sentence to be parsed as initial sentential form. 
STEP 2: Shift reduce parsing uses a stack to hold the grammar and input tape holds the string. STEP 3: Shift reduce parsing performs the two actions: shift and reduce. 
STEP 4: In shift action: the current symbol in the input string is pushed to a stack. 
STEP 5: In reduced action: the symbols will be replaced by non terminal. The symbol is the right side of production and non terminal is the left side of production. 
STEP 6: Stop the program. 
Program : 
#include<stdio.h> 
#include<string.h> 
struct stack 
{ 
char s[20]; 
int top; 
}; 
struct stack st; 
int isempty() 
{ return (st.top==1); 
} 
void push(char p) 
{ 
st.s[st.top++]=p; 
} 
char pop() 
{ 
if(isempty()) 
printf("stack empty"); 
else 
return st.s[st.top--]; 
} 
void disp() 
{ int i; 
for(i=0;i<st.top;i++) 
printf("%c",st.s[i]); 
} 
int reduce(int *j,char rp[10][10],int n)


{ int i,t,k; 
char u[10]; 
t=st.top-1; 
for (i=0;i<=st.top;i++) 
{ u[i]=st.s[t]; 
u[i+1]='\0'; 
for(k=0;k<n;k++) 
{ 
if(strcmp(rp[k],u)==0) 
{ 
st.top=st.top-i-1; 
return k; 
} 
} 
t--; 
} 
return 99; 
} 
int shift(char ip[],int *j) 
{ push(ip[*j]); 
(*j)++; 
disp(); 
return 1; 
} 
void main() 
{ int n,i,j=0,k,h; 
char lp[10]; 
char ip[10]; 
char rp[10][10]; 
st.top=0; 
printf("\nEnter the number of productions:"); 
scanf("%d",&n); 
for(i=0;i<n;i++) 
{ printf("\nEnter the left side of the production %d:",i+1); 
scanf(" %c",&lp[i]); 
printf("\nEnter the right side of the production %d:",i+1); 
scanf("%s",rp[i]); 
} 
printf("\nEnter the input:"); 
scanf("%s",ip); 
printf("============================================================= ===="); 
printf("\nSTACK INPUT OUTPUT "); 
printf("\n============================================================ =====\n"); 
strcat(ip,"$"); 
push('$'); 
printf("$ %s \n",ip);


while(!(st.s[st.top-1]==lp[0]&&st.s[st.top-2]=='$'&&(j==(strlen(ip)-1))&&st.top==2)) { 
if((h=reduce(&j,rp,n))!=99) 
{ push(lp[h]);disp();printf("\t\t\t"); 
for(k=j;k<strlen(ip);k++) 
printf("%c",ip[k]); 
printf("\t\t\tReduce %c->%s\n",lp[h],rp[h]); 
} 
else if(shift(ip,&j)) 
{ printf("\t\t\t"); 
for(k=j;k<strlen(ip);k++) 
printf("%c",ip[k]); 
printf("\t\t\tshift %c\n",ip[j-1]); 
} 
} 
disp(); 
printf("\t\t\t"); 
for(k=j;k<strlen(ip);k++) 
printf("%c",ip[k]); 
printf("\t\t\taccept\n"); 
} 
OUTPUT : 
cc ShiftReduceParser.c
./a.out
Enter the number of productions:3
Enter the left side of the production 1:E
Enter the right side of the production 1:E+E
Enter the left side of the production 2: E
Enter the right side of the production 2:E*E
Enter the left side of the production 3: E
Enter the right side of the production 3:i
Enter the input:i+i*i
STACK		INPUT		OUTPUT
$		i+i*i$		
$i		+i*i$		shift i
$E		+i*i$		Reduce E->i
$E+		i*i$		shift +
$E+i		*i$		shift i
$E+E		*i$		Reduce E->i
$E		*i$		Reduce E->E+E
$E*		i$		shift *
$E*i		$		shift i
$E*E		$		Reduce E->i
$E		$		Reduce E->E*E
$E		$		accept





8        Implementation of front end of a compiler that generates the three address code 


STEP 1:Start the program 
STEP 2:Obtain the high level language as input 
STEP 3:Based on pattern and lexemes stored in the symbol table in the three address code is obtained 
STEP 4:Three address code generated will be optimized and displayed 
STEP 5:stop the program. 
Program : 
#include<stdio.h> 
#include<ctype.h> 
#include<string.h> 
int ag=0,z=1; 
void main() 
{ 
char 
a[50],id[50],b[50],op[50],mov[]="MOVF",mul[]="MULF",div[]="DIVF",add[]="ADDF",sub[] = "SUBF",ti=0; 
int i=0,j=0,k=0,len=0,s=0,e=0,r=1,count; 
FILE *fp; 
fp=fopen("out.txt","w"); 
printf("\nEnter the code:"); 
scanf("%s",a); 
strcpy(b,a); 
len=strlen(a); 
for ( i=0;i<strlen(b);i++ ){ 
if ( b[i] == '*' || b[i] == '/' ){ 
for ( j=i-1;b[j]!='-'&&b[j]!='+'&&b[j]!='*'&&b[j]!='/'&&b[j]!='=';j--); 
k=j+1; 
count=0; 
printf("\nt%d=",ti++); 
for ( j=j+1;count<2&&b[j]!='\0';j++ ){ 
if ( b[j+1] == '+' || b[j+1] == '-' || b[j+1] == '*' || b[j+1] == '/' ) 
count++; 
printf("%c",b[j]);


} 
b[k++]='t'; 
b[k++]=ti-1+48; 
for ( j=j,k=k;k<strlen(b);k++,j++ ) 
b[k]=b[j]; 
i=0; 
} 
} 
for ( i=0;i<strlen(b);i++ ){ 
if ( b[i] == '+' || b[i] == '-' ){ 
for ( j=i-1;b[j]!='-'&&b[j]!='+'&&b[j]!='=';j--); 
k=j+1; 
count=0; 
printf("\nt%d=",ti++); 
for ( j=j+1;count<2&&b[j]!='\0';j++ ) 
{ 
if ( b[j+1] == '+' || b[j+1] == '-' ) 
count++; 
printf("%c",b[j]); 
} 
b[k++]='t'; 
b[k++]=ti-1+48; 
for ( j=j,k=k;k<strlen(b);k++,j++ ) 
b[k]=b[j]; 
} 
} 
printf("\n%s",b); 
} 
OUTPUT : 
skcet@SK-AK:~$ cc frontEnd.c
skcet@SK-AK:~$ ./a.out
Enter the code:d=(a-b)+(a-c)+b*c
t0=b*c
t1=(a-b)
t2=(a-c)
d=t1+t2+t0










9        Implementation of the back end of the compiler


STEP 1:Start the program 
STEP 2:Read the input with the intermediate representation 
STEP 3:Based on the three address code the given input will be processed will converted to assembly code with an operation like ADD,SUB,MUL,MOV,STORE,LOAD. 
STEP 4:Generated output will be returned in the file called out.txt 
STEP 5:Stop the program 
Program: 
#include<stdio.h> 
#include<ctype.h> 
#include<string.h> 
int ag=0,z=1; 
void main() 
{ 
char 
a[50],id[50],mov[]="MOVF",mul[]="MULF",div[]="DIVF",add[]="ADDF",sub[]="SUBF"; int i=0,j=0,len=0,s=0,e=0,r=1; 
FILE *fp; 
fp=fopen("out.txt","w"); 
printf("\nEnter the code:"); 
gets(a); 
len=strlen(a); 
for(i=0;i<len;i++) 
{ 
if(a[i]=='=') 
{ 
for(j=i;j<len;j++) 
if(a[j]=='i') 
{ 
fprintf(fp,"\n%s ",mov); 
fprintf(fp,"%c%c%c,R%d",a[j],a[j+1],a[j+2],r++); 
} 
} 
else if((a[i]<=57)&&(a[i]>=48)) 
if((a[i+1]<=57)&&(a[i+1]>=48))


fprintf(fp,"\n%s #%c%c,R%d",mov,a[i],a[i+1],r++); 
} 
for(i=len-1;i>=0;i--) 
{ 
if(a[i]=='+') 
{ 
fprintf(fp,"\n%s ",add); 
e=a[i-1]; 
e--; 
s=e; 
if(a[i+1]=='i') 
fprintf(fp,"R%c,R%d",e,r-1); 
} 
else if(a[i]=='-') 
{ 
fprintf(fp,"\n%s ",sub); 
e=a[i-1]; 
e--; 
s=e; 
if(a[i+1]=='i') 
fprintf(fp,"R%c,R%c",(a[i+3]-1),s); 
else 
fprintf(fp,"R%c,R%d",e,r-1); 
} 
else if(a[i]=='*') 
{ 
fprintf(fp,"\n%s ",mul); 
e=a[i-1]; 
e--; 
s=e; 
if(a[i+1]=='i') 
fprintf(fp,"R%c,R%c",(a[i+3]-1),s); 
else 
fprintf(fp,"R%c,R%d",e,r-1); 
} 
else if(a[i]=='/') 
{ 
fprintf(fp,"\n%s ",div); 
e=a[i-1]; 
e--; 
s=e; 
if(a[i+1]=='i') 
fprintf(fp,"R%c,R%c",(a[i+3]-1),s); 
else 
fprintf(fp,"R%c,R%d",e,r-1); 
} 
}        fprintf(fp,"\n%s R1,id1",mov); } 
OUTPUT: 
cc backEnd.c
./a.out
Enter the code:id1=id2*id3+id4

out.txt
MOVF id2, R1
MOVF id3,R2
MOVF id4, R3
ADDF R2, R3
MULF R2, R1
MOVF R1,id1


